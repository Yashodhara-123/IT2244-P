//send

#include<stdio.h>
#include<sys/ipc.h>
#include<sys/msg.h>
#define MAX 10

//structure for message queue
struct mesg_buffer{
        long mesg_type;
        char mesg_text[100];
}message;
int main()
{
        key_t key;
        int msgid;
        //fork to generate unique key
        key = ftok("ipcsend",54);
        //msgget creates a message queue and return identities
        msgid = msgget(key,0666 | IPC_CREAT);
        message.mesg_type = 1;
        printf("Write Data: ");
        fgets(message.mesg_text,MAX,stdin);
        //msgsnd to send message
        msgsnd(msgid,&message,sizeof(message),0);
        //display the message
        printf("Data send is: %s \n",message.mesg_text);
        return 0;
}


//recieve
#include<stdio.h>
#include<sys/ipc.h>
#include<sys/msg.h>
//structure for message queue
struct mesg_buffer{
        long mesg_type;
        char mesg_text[100];
}message;
int main()
{
        key_t key;
        int msgid;
        //ftok to generate unique key
        key = ftok("ipcsend",54);
        //msgget creates a message queue and return identities
        msgid = msgget(key,0666 | IPC_CREAT);
        //msgrcv to recieve message
        msgrcv(msgid,&message,sizeof(message),1,0);
        //display the message
        printf("Data Received is: %s \n",message.mesg_text);
        //to distroy the message queue
        msgctl(msgid,IPC_RMID,NULL);
        return 0;
}



[2021ict54@fedora ~]$ touch progfile2021ICT54
[2021ict54@fedora ~]$ chmod 644 progfile2021ICT54

[2021ict54@fedora ~]$ vi ipcsend.c
[2021ict54@fedora ~]$ vi ipcreceive.c
[2021ict54@fedora ~]$ gcc ipcsend.c -o ipcsend
[2021ict54@fedora ~]$ gcc ipcreceive.c -o ipcreceive
[2021ict54@fedora ~]$ ./ipcsend
Write Data: hii
Data send is: hii

[2021ict54@fedora ~]$ ./ipcreceive
Data Received is: hii


=======================================================================================
(IPCEx1)

Exercise:

IPC using Message Queue

read inputs from the parent process
Enter Name: hi
Enter RegNo : 2314
Enter Age : 24

Message sent Successfully.

give the output from the child process
Received Name : hi
Received RegNo : 2314
Received Age : 24


#include <stdio.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>

#define MAX 100

// Message structure
struct mesg_buffer {
    long mesg_type;
    char name[MAX];
    char regno[MAX];
    int age;
} message;

int main()
{
    key_t key;
    int msgid;

    // Generate unique key
    key = ftok("progfile", 65);

    // Create message queue and get id
    msgid = msgget(key, 0666 | IPC_CREAT);

    pid_t pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    }

    if (pid > 0) {
        // Parent process - read inputs and send message
        printf("Enter Name: ");
        fgets(message.name, MAX, stdin);
        message.name[strcspn(message.name, "\n")] = '\0'; // remove newline

        printf("Enter RegNo: ");
        fgets(message.regno, MAX, stdin);
        message.regno[strcspn(message.regno, "\n")] = '\0';

        printf("Enter Age: ");
        scanf("%d", &message.age);

        message.mesg_type = 1;

        // Send message - send everything except mesg_type length
        msgsnd(msgid, &message, sizeof(struct mesg_buffer) - sizeof(long), 0);

        printf("\nMessage sent Successfully.\n");

        wait(NULL);  // wait for child
        // Remove the message queue after use
        msgctl(msgid, IPC_RMID, NULL);
    }
    else {
        // Child process - receive message
        msgrcv(msgid, &message, sizeof(struct mesg_buffer) - sizeof(long), 1, 0);

        printf("\nReceived Name: %s\n", message.name);
        printf("Received RegNo: %s\n", message.regno);
        printf("Received Age: %d\n", message.age);
    }

    return 0;
}





